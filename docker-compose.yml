version: '3.8'

services:
  # MongoDB - Free local database
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: mern-chat-app
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - chat-app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGO_URI=mongodb://mongodb:27017/mern-chat-app
      - GENERATIVE_API_KEY=${GENERATIVE_API_KEY:-}
      - EMAIL=${EMAIL:-writely41@gmail.com}
      - PASSWORD=${PASSWORD:-uhox dexo kmlp slhp}
      - CLOUDINARY_ClOUD_NAME=${CLOUDINARY_ClOUD_NAME:-ds1ceummz}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY:-869577595372892}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET:-svN7OqOXtt8YadVOJ1XKbZ93MUw}
      - JWT_SECRET=${JWT_SECRET:-mern-chat-app-secret}
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - chat-app-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chat-app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session management and caching (free)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat-app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  chat-app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
